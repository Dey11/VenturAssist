generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------------------
// ENUMS for data integrity and consistency
// ----------------------------------------

/// Defines the type of asynchronous job to be processed by a worker.
enum JobType {
  EXTRACT_DATA_FROM_SOURCE
  SCRAPE_COMPETITOR_DATA
  BENCHMARK_AGAINST_PEERS
  GENERATE_RISK_ANALYSIS
  GENERATE_FINAL_SUMMARY
}

/// Represents the status of any asynchronous job.
enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  RETRYING
}

/// Type of data source provided by the user.
enum DataSourceType {
  FILE_UPLOAD
  TEXT_INPUT
  URL
}

/// Severity level for identified risks.
enum RiskSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // RELATIONS
  sessions Session[]
  accounts Account[]
  startups Startup[] // A user can have multiple startup analysis projects.
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

// ----------------------------------------
// CORE APPLICATION MODELS
// ----------------------------------------

/// The central entity for an analysis project.
/// Everything is anchored to a specific startup analysis.
model Startup {
  id              String    @id @default(cuid())
  name            String
  description     String?
  websiteUrl      String?
  overallStatus   JobStatus @default(PENDING) /// High-level status of the entire analysis pipeline.
  finalSummary    String? /// The final investor-ready summary generated by the AI.
  recommendation  String? /// e.g., "Proceed with due diligence", "Monitor", "Pass"
  confidenceScore Float? /// A score from 0 to 1 on the recommendation.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  dataSources DataSource[]
  jobs        Job[]
  teamMembers TeamMember[]
  keyMetrics  KeyMetric[]
  marketInfo  MarketInfo? // A startup likely has one primary market analysis.
  benchmarks  Benchmark[]
  risks       RiskIndicator[]
  chatHistory ChatMessage[]

  @@index([userId])
}

/// Represents a piece of information uploaded by the user (deck, transcript, url).
model DataSource {
  id        String         @id @default(cuid())
  type      DataSourceType
  fileName  String? /// Original name of the uploaded file.
  sourceUrl String? /// URL for FILE (in object storage) or URL type.
  content   String? /// For TEXT_INPUT type.
  status    JobStatus      @default(PENDING) /// Status of the initial ingestion/processing for this source.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)
  jobs      Job[]

  @@index([startupId])
}

/// Generic model to track any asynchronous task in the system.
/// This is key for scalability and observability.
model Job {
  id          String    @id @default(cuid())
  type        JobType
  status      JobStatus @default(PENDING)
  payload     Json? /// Input for the job, e.g., { "fileUrl": "...", "dataSourceId": "..." }
  result      Json? /// Output of the job, e.g., { "metricsExtracted": 5, "teamMembersFound": 3 }
  logs        String? /// Store error messages or processing logs.
  startedAt   DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  // A job can be associated with a specific data source, but doesn't have to be.
  dataSourceId String?
  dataSource   DataSource? @relation(fields: [dataSourceId], references: [id], onDelete: SetNull)

  @@index([startupId])
  @@index([status])
  @@index([type])
}

// ----------------------------------------
// STRUCTURED DATA MODELS (Populated by Ingestor Agent)
// ----------------------------------------

/// Stores information about team members extracted from data sources.
model TeamMember {
  id          String  @id @default(cuid())
  name        String
  role        String?
  linkedInUrl String?
  bioSummary  String? /// AI-generated summary of their experience.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@index([startupId])
}

/// Stores key metrics (e.g., MRR, Churn) extracted from sources.
model KeyMetric {
  id           String    @id @default(cuid())
  name         String /// e.g., "Monthly Recurring Revenue"
  value        String /// Stored as string to accommodate formats like "$50k" or "20%".
  unit         String? /// e.g., "USD", "%"
  reportedDate DateTime? /// Date the metric was reported, if available.
  insight      String? /// AI-generated comment on the metric's significance.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@index([startupId])
}

/// Stores market size information (TAM, SAM, SOM).
model MarketInfo {
  id       String  @id @default(cuid())
  tam      String? /// Total Addressable Market
  sam      String? /// Serviceable Available Market
  som      String? /// Serviceable Obtainable Market
  analysis String? /// AI's analysis of the market sizing claims.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  startupId String  @unique // Each startup has only one market info record.
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)
}

// ----------------------------------------
// ANALYSIS & INSIGHT MODELS (Populated by other Agents)
// ----------------------------------------

/// Stores benchmarking results comparing the startup to peers.
model Benchmark {
  id                String @id @default(cuid())
  metricName        String /// e.g., "Team Size Growth (6mo)"
  startupValue      String
  competitorAverage String
  insight           String /// AI-generated explanation of the comparison.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@index([startupId])
}

/// Stores potential risks or red flags identified by the AI.
model RiskIndicator {
  id          String       @id @default(cuid())
  riskTitle   String /// e.g., "Inconsistent Metrics", "Inflated Market Size"
  explanation String
  severity    RiskSeverity

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@index([startupId])
}

// ----------------------------------------
// INTERACTIVE AGENT MODELS
// ----------------------------------------

/// Stores the conversation history for the chat feature.
model ChatMessage {
  id      String @id @default(cuid())
  role    String /// "user" or "assistant"
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELATIONS
  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@index([startupId])
}
